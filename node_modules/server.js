#!/usr/bin/env node
var WebSocketServer = require('websocket').server;
var http = require('http');
var receiver=null;
var sender;

var urlarray = [];

var server = http.createServer(function(request, response) {
    console.log((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
});
server.listen(8080, function() {
    console.log((new Date()) + ' Server is listening on port 8080');
});
 
wsServer = new WebSocketServer({
    httpServer: server,
    // You should not use autoAcceptConnections for production
    // applications, as it defeats all standard cross-origin protection
    // facilities built into the protocol and the browser.  You should
    // *always* verify the connection's origin and decide whether or not
    // to accept it.
    autoAcceptConnections: false
});
 
function originIsAllowed(origin) {
  // put logic here to detect whether the specified origin is allowed.
  return true;
}

// Qcount for Queue Counter
// Pcount for Player Counter

var playCount = 0;
 
wsServer.on('request', function(request) {
    if (!originIsAllowed(request.origin)) {
      // Make sure we only accept requests from an allowed origin
      request.reject();
      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
      return;
    }
	
    var connection = request.accept(null, request.origin);
    console.log((new Date()) + ' Connection accepted.');
    connection.on('message', function(message) {
	
	
        if (message.type === 'utf8') {
		
		// To classify 'Sender' and 'Receiver' message
		// data is formed like sender@'msg'
        var strArray=message.utf8Data.split('@');
		
		// To prevent error in case
 		// either Sender or Receiver is not connected
		//sender = connection;
		//receiver = connection;
		
      
		
		// Classify Sender and Receiver
        if(strArray[0] ===  'receiver') {
           console.log('Request from Receiver');
		   if(strArray[1] ==='connect') {
				receiver = connection;
				console.log('Receiver Connection Success !!');
				console.log('Receiver url : ' + receiver.remoteAddress);
				
				
				
			}
			
			else if(strArray[1] === 'end'){
				
				
				receiver.send(urlarray[playCount++]);
				
				console.log('==========Next Video Loaded==========');
				console.log('Receiver is now playing next Queued URL'+playCount);
				
				if ( playCount === urlarray.length){
					console.log('!!! - Player Counter initialized - !!!');
					playCount = 0;
				
					
				}
				
				
				
			}
			else {
				console.log('Received Duration : ' + message.utf8Data);
				sender.sendUTF(strArray[1]);
			}
          // connection.sendUTF('start');
        }
         
        else if(strArray[0] === 'sender') {
			console.log('Request from Sender');
			//sender가 보낸 메세지 처리//
			switch(strArray[1]) {
				case 'connect' : {
					sender = connection;
					console.log('Sender Connection Success !!');
					console.log('Sender url : ' + sender.remoteAddress);
					break;
				}
				case 'url' :{
					console.log('url and queued');
				
					if(urlarray.length === 0 && receiver !== null) {
						urlarray.push(strArray[2]);
						receiver.send(strArray[2]);
						playCount++;
					}
					 
					else {
						urlarray.push(strArray[2]);
						}
					break;
				}
				default : {
					console.log(message.utf8Data);
					break;
					
				}
				
			}
			
			
          }
         
         else {
         console.log('Received Message: ' + message.utf8Data);
         }
          
        }
        else if (message.type === 'binary') {
            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
            connection.sendBytes(message.binaryData);
        }
    });
    connection.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });
});

